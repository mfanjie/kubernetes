/*
Copyright 2016 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file is generated by client-gen with the default arguments.

package unversioned

import (
	api "k8s.io/kubernetes/pkg/api"
	controlplane "k8s.io/kubernetes/pkg/apis/controlplane"
	watch "k8s.io/kubernetes/pkg/watch"
)

// SubReplicationControllersGetter has a method to return a SubReplicationControllerInterface.
// A group's client should implement this interface.
type SubReplicationControllersGetter interface {
	SubReplicationControllers(namespace string) SubReplicationControllerInterface
}

// SubReplicationControllerInterface has methods to work with SubReplicationController resources.
type SubReplicationControllerInterface interface {
	Create(*controlplane.SubReplicationController) (*controlplane.SubReplicationController, error)
	Update(*controlplane.SubReplicationController) (*controlplane.SubReplicationController, error)
	UpdateStatus(*controlplane.SubReplicationController) (*controlplane.SubReplicationController, error)
	Delete(name string, options *api.DeleteOptions) error
	DeleteCollection(options *api.DeleteOptions, listOptions api.ListOptions) error
	Get(name string) (*controlplane.SubReplicationController, error)
	List(opts api.ListOptions) (*controlplane.SubReplicationControllerList, error)
	Watch(opts api.ListOptions) (watch.Interface, error)
	SubReplicationControllerExpansion
}

// subReplicationControllers implements SubReplicationControllerInterface
type subReplicationControllers struct {
	client *ControlplaneClient
	ns     string
}

// newSubReplicationControllers returns a SubReplicationControllers
func newSubReplicationControllers(c *ControlplaneClient, namespace string) *subReplicationControllers {
	return &subReplicationControllers{
		client: c,
		ns:     namespace,
	}
}

// Create takes the representation of a subReplicationController and creates it.  Returns the server's representation of the subReplicationController, and an error, if there is any.
func (c *subReplicationControllers) Create(subReplicationController *controlplane.SubReplicationController) (result *controlplane.SubReplicationController, err error) {
	result = &controlplane.SubReplicationController{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("subreplicationcontrollers").
		Body(subReplicationController).
		Do().
		Into(result)
	return
}

// Update takes the representation of a subReplicationController and updates it. Returns the server's representation of the subReplicationController, and an error, if there is any.
func (c *subReplicationControllers) Update(subReplicationController *controlplane.SubReplicationController) (result *controlplane.SubReplicationController, err error) {
	result = &controlplane.SubReplicationController{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("subreplicationcontrollers").
		Name(subReplicationController.Name).
		Body(subReplicationController).
		Do().
		Into(result)
	return
}

func (c *subReplicationControllers) UpdateStatus(subReplicationController *controlplane.SubReplicationController) (result *controlplane.SubReplicationController, err error) {
	result = &controlplane.SubReplicationController{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("subreplicationcontrollers").
		Name(subReplicationController.Name).
		SubResource("status").
		Body(subReplicationController).
		Do().
		Into(result)
	return
}

// Delete takes name of the subReplicationController and deletes it. Returns an error if one occurs.
func (c *subReplicationControllers) Delete(name string, options *api.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("subreplicationcontrollers").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *subReplicationControllers) DeleteCollection(options *api.DeleteOptions, listOptions api.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("subreplicationcontrollers").
		VersionedParams(&listOptions, api.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Get takes name of the subReplicationController, and returns the corresponding subReplicationController object, and an error if there is any.
func (c *subReplicationControllers) Get(name string) (result *controlplane.SubReplicationController, err error) {
	result = &controlplane.SubReplicationController{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("subreplicationcontrollers").
		Name(name).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of SubReplicationControllers that match those selectors.
func (c *subReplicationControllers) List(opts api.ListOptions) (result *controlplane.SubReplicationControllerList, err error) {
	result = &controlplane.SubReplicationControllerList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("subreplicationcontrollers").
		VersionedParams(&opts, api.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested subReplicationControllers.
func (c *subReplicationControllers) Watch(opts api.ListOptions) (watch.Interface, error) {
	return c.client.Get().
		Prefix("watch").
		Namespace(c.ns).
		Resource("subreplicationcontrollers").
		VersionedParams(&opts, api.ParameterCodec).
		Watch()
}
